<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:db/db.properties" system-properties-mode="OVERRIDE"/>



    <beans profile="localhost">
        <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
              p:driverClassName="org.postgresql.Driver"
              p:url="${jdbc.url}"
              p:username="${jdbc.user}"
              p:password="${jdbc.password}"/>
    </beans>

    <beans profile="heroku">
        <bean class="java.net.URI" id="dbUrl">
            <constructor-arg value="${DATABASE_URL}"/>
        </bean>
        <bean id="dataSource"
              class="org.apache.tomcat.jdbc.pool.DataSource"
              p:url="#{ 'jdbc:postgresql://' + @dbUrl.getHost() + @dbUrl.getPath() }"
              p:username="#{ @dbUrl.getUserInfo().split(':')[0] }"
              p:password="#{ @dbUrl.getUserInfo().split(':')[1] }"
              p:driverClassName="org.postgresql.Driver"/>
    </beans>
    <beans profile="jdbc">

        <context:component-scan base-package="com.questions.repository.question.JDBC"/>

        <bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
            <constructor-arg ref="dataSource"/>
        </bean>

        <bean class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
            <constructor-arg ref="dataSource"/>
        </bean>
    </beans>

    <beans profile="JPA">
        <context:component-scan base-package="com.questions.repository.question.JPA"/>

        <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
        p:dataSource-ref="dataSource"
        p:packagesToScan="com.questions.model">

            <property name="jpaPropertyMap">
                <map>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}"
                           value="${hibernate.use_sql_comments}"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).CACHE_REGION_FACTORY}" value="org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory"/>
                    <entry key="#{T(org.hibernate.cache.ehcache.AbstractEhcacheRegionFactory).NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME}" value="cache/ehcache.xml"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SECOND_LEVEL_CACHE}" value="true"/>
                </map>
            </property>
            <property name="jpaVendorAdapter">
                <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                      p:showSql="${jpa.showSql}"/>
            </property>
        </bean>
        <tx:annotation-driven transaction-manager="transactionManager"/>

        <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
        p:entityManagerFactory-ref="entityManagerFactory"/>
    </beans>


</beans>